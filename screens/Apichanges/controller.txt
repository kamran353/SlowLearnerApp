using SlowLearnerApi.Models;
using SlowLearnerNewApi.Models;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web;
using System.Web.Http;

namespace SlowLearnerApi.Controllers
{
	public class SlowLearnerController : ApiController
	{
		private readonly SlowLearnerEntities db = new SlowLearnerEntities();
		private Random random;
		private int previousGeneratedPosition;
		public HttpResponseMessage GetUnApprovedDoctors()
		{
			try
			{
				var Doctors = db.Users.Where(x => x.UserRole == "Doctor" && x.IsApproved == false).ToList();

				return Request.CreateResponse(HttpStatusCode.OK, Doctors);
			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
		public HttpResponseMessage GetApprovedDoctors()
		{
			try
			{
				var Doctors = db.Users.Where(x => x.UserRole == "Doctor" && x.IsApproved == true).ToList();

				return Request.CreateResponse(HttpStatusCode.OK, Doctors);
			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
		[HttpPost]
		public HttpResponseMessage RegisterUser(User user)
		{
			try
			{
				db.Users.Add(user);
				db.SaveChanges();
				return Request.CreateResponse(HttpStatusCode.OK, user);
			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
		[HttpGet]
		public HttpResponseMessage LoginUser(string Username, string Userpassword)
		{
			try
			{
				var user = db.Users.Where(x => x.UserPassword == Userpassword 
										  && x.UserName == Username).FirstOrDefault();
				return Request.CreateResponse(HttpStatusCode.OK, user);

			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
		[HttpGet]
		public HttpResponseMessage ApproveUnApproveUser(int UserId, bool b)
		{
			try
			{
				var user = db.Users.Where(x => x.UserId == UserId).FirstOrDefault();
				if (user != null)
				{
					user.IsApproved = b;
					db.Entry(user).State = EntityState.Modified;
					db.SaveChanges();
				}
				return Request.CreateResponse(HttpStatusCode.OK, user);

			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
		[HttpGet]
		public HttpResponseMessage GetMyAssistents(int DoctorId)
		{
			try
			{

				return Request.CreateResponse(HttpStatusCode.OK, db.Users.Where(x => x.ReferenceUserId == DoctorId && x.UserRole == "PA").ToList());

			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
		[HttpGet]
		public HttpResponseMessage GetPAPatients(int PAId)
		{
			try
			{
				var patients = db.Users.Where(x => x.ReferenceUserId == PAId
											  && x.UserRole == "Patient").ToList();
				return Request.CreateResponse(HttpStatusCode.OK, patients);

			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}

		[HttpGet]
		public HttpResponseMessage GetDocAttendants(int DoctorId)
		{
			try
			{

				var paIds = db.Users.Where(x => x.ReferenceUserId==DoctorId && x.UserRole == "PA")
					                      .Select(x => x.UserId).ToList();

				var attendants = db.Users.Where(x => (paIds.Contains((int)x.ReferenceUserId)
												   || x.ReferenceUserId == DoctorId)
												   && x.UserRole == "Attendant").ToList();

				return Request.CreateResponse(HttpStatusCode.OK, attendants);
			}
			catch (Exception ex)
			{
				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
		[HttpPost]
		public HttpResponseMessage AssignAttendantToPatient(PatientAttendant attendant)
		{
			try
			{
				var IsExist = db.PatientAttendants.FirstOrDefault(x => x.PatientAttendantId == attendant.AttendantId && x.PatientId == attendant.PatientId);
				if (IsExist == null)
				{
					IsExist = new PatientAttendant
					{
						PatientId = attendant.PatientId,
						AttendantId = attendant.AttendantId
					};
					db.PatientAttendants.Add(IsExist);
					db.SaveChanges();
				}

				return Request.CreateResponse(HttpStatusCode.OK, "Assigned");
			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
		[HttpGet]
		public HttpResponseMessage UnAssignPatientFromAttendant(int AttendantId, int PatientId)
		{
			try
			{
				var IsExist = db.PatientAttendants.FirstOrDefault(x => x.AttendantId == AttendantId && x.PatientId == PatientId);
				if (IsExist != null)
				{
					db.Entry(IsExist).State=EntityState.Deleted;
					db.SaveChanges();
				}

				return Request.CreateResponse(HttpStatusCode.OK, "UnAssigned");
			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}

		[HttpGet]
		public HttpResponseMessage GetAttendantPatients(int AttendantId)
		{
			try
			{
				var patientIds = db.PatientAttendants.Where(x => x.AttendantId == AttendantId).Select(x=>x.PatientId).ToList();
				var patients = db.Users.Where(x=> patientIds.Contains(x.UserId)).ToList();
				return Request.CreateResponse(HttpStatusCode.OK, patients);
			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}

		[HttpGet]
		public HttpResponseMessage GetDocPatients(int DoctorId)
		{
			try
			{
				
				var paIds = db.Users.Where(x => x.ReferenceUserId == 
										   DoctorId && x.UserRole == "PA").Select(x => x.UserId).ToList();// PA-1--->referenceId=doc   Patient-3 -->referenceuserid=1

				var patients = db.Users.Where(x => (paIds.Contains((int)x.ReferenceUserId) 
												   || x.ReferenceUserId == DoctorId) 
												   && x.UserRole == "Patient").ToList();

				return Request.CreateResponse(HttpStatusCode.OK, patients);
			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
		[HttpGet]
		public HttpResponseMessage GetDocPatientsWithRefferd(int DoctorId)
		{
			try
			{
				var patients = new List<User>();
				var paIds = db.Users.Where(x => x.ReferenceUserId == DoctorId && x.UserRole == "PA").Select(x => x.UserId).ToList();// PA-1--->referenceId=doc   Patient-3 -->referenceuserid=1
				var patientIds = db.ReferredPatients.Where(x => x.ToDoctorId == DoctorId)
													.Select(x => x.PatientId).ToList();//patient-2

				patients = db.Users.Where(x => (paIds.Contains((int)x.ReferenceUserId) 
												|| x.ReferenceUserId == DoctorId 
												|| patientIds.Contains(x.UserId)) 
												&& x.UserRole == "Patient").ToList();

				return Request.CreateResponse(HttpStatusCode.OK, patients);
			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}

		[HttpPost]
		public HttpResponseMessage ReferPatientToDoctor(ReferredPatient referPatient)
		{
			try
			{
				db.ReferredPatients.Add(referPatient);
				db.SaveChanges();
				return Request.CreateResponse(HttpStatusCode.OK, referPatient);
			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}

		[HttpGet]
		public HttpResponseMessage AppointmentPractices(int AppId)
		{
			try
			{
				var AppoinmentPractices = db.AppoinmentPractices.Where(x => x.AppId == AppId); 
				var practices = db.Practices.Join(AppoinmentPractices,
							   p => p.PracticeId,
							   app => app.PracticeId,
							   (p, app) => new 
							   {
									app.PracticeId,
								   p.PracticeTitle,
								   app.AppPracticeId,
								   TotalWrong = db.PatientAnswers.Where(x => x.AppPracticeId == app.AppPracticeId && x.IsAttempted == true && x.IsRight == false).Count(),
								   UnAttempted = db.PatientAnswers.Where(x => x.AppPracticeId == app.AppPracticeId && x.IsAttempted == false).Count(),
								   TotalRight = db.PatientAnswers.Where(x => x.AppPracticeId == app.AppPracticeId && x.IsAttempted == true && x.IsRight == true).Count(),
								   Total = db.PatientAnswers.Where(x => x.AppPracticeId == app.AppPracticeId).Count()
							   }).ToList();

				return Request.CreateResponse(HttpStatusCode.OK, practices);
			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}

		public HttpResponseMessage ReActivateAppointment(int AppId)
		{
			try
			{
				var appointment = db.Appointments.Where(x => x.AppId == AppId).FirstOrDefault();
				if (appointment != null)
				{
					appointment.IsActive = true;
					db.Entry(appointment).State = System.Data.Entity.EntityState.Modified;
					db.SaveChanges();

					var appPracticeIds=db.AppoinmentPractices.Where(p=>p.AppId == AppId)
															 .Select(p=>p.AppPracticeId).ToList();

					var patientAnswer = db.PatientAnswers.Where(x => appPracticeIds.Contains((int)x.AppPracticeId)).ToList();
					foreach (var item in patientAnswer)
					{
						item.IsAttempted = false;
						db.Entry(item).State = System.Data.Entity.EntityState.Modified;
					}
					db.SaveChanges();
				}

				return Request.CreateResponse(HttpStatusCode.OK, appointment);
			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
		[HttpGet]
		public HttpResponseMessage Patient_Practices(int Patient_Id)
		{
			try
			{
				var practices = new List<Practice>();
				var practiceIds = db.PatientPractices.Where(x => x.PatientId == Patient_Id).Select(x => x.PracticeId).ToList();
				if (practiceIds != null)
				{
					practices = db.Practices.Where(x => practiceIds.Contains(x.PracticeId)).ToList();

				}

				return Request.CreateResponse(HttpStatusCode.OK, practices);
			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
		[HttpPost]
		public HttpResponseMessage AddNewPractice(PracticeModel NewPractice)
		{
			try
			{
				Practice practice = new Practice();
				List<PracticeCollection> practiceCollections = new List<PracticeCollection>();
				practice.PracticeTitle = NewPractice.Title;
				practice.DoctorId = NewPractice.DoctorId;
				practice.PracticeLevel = NewPractice.LevelNo;


				db.Practices.Add(practice);
				db.SaveChanges();


				var CollectoinIds = NewPractice.CollectionIds.Split(',').ToList();
				foreach (var item in CollectoinIds)
				{
					var practiceCollection = new PracticeCollection
											   { CollectionId = int.Parse(item),
												PracticeId = practice.PracticeId 
											   };
					practiceCollections.Add(practiceCollection);
				}
				if (practiceCollections.Count > 0)
				{
					db.PracticeCollections.AddRange(practiceCollections);
					db.SaveChanges();
				}
				return Request.CreateResponse(HttpStatusCode.OK, "Added");
			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
		[HttpGet]
		public HttpResponseMessage GetMyLevelPracticesAndLastAppointmentOfPatient(int PracticeLevel, int DoctorId, int PatientId)
		{
			try
			{
				AppointmentDetailsModel appointmentDetailsModel = new AppointmentDetailsModel();

				appointmentDetailsModel.Practices = db.Practices.Where(x => x.PracticeLevel == PracticeLevel && x.DoctorId == DoctorId).ToList();
				appointmentDetailsModel.LastAppointment = db.Appointments.Where(x => x.PatientId == PatientId
																		   && x.DoctorId == DoctorId && (x.IsActive == true 
																		  || x.IsComplete == true))
																		  .OrderByDescending(x => x.AppDate).FirstOrDefault();
				appointmentDetailsModel.VisitNo = db.Appointments.Where(x => x.PatientId == PatientId
																		   && x.DoctorId == DoctorId && (x.IsActive == true
																		  || x.IsComplete == true)).Count();

				appointmentDetailsModel.PreviousPracticeIds = new List<int>();
				if (appointmentDetailsModel.LastAppointment != null)
				{
					var appId= appointmentDetailsModel.LastAppointment.AppId;
					appointmentDetailsModel.PreviousPracticeIds = db.AppoinmentPractices
																   .Where(x => x.AppId == appId)
																		 .Select(x =>(int) x.PracticeId).ToList();
				}
				
				return Request.CreateResponse(HttpStatusCode.OK, appointmentDetailsModel);

			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
		[HttpGet]
		public HttpResponseMessage GetMyLevelPractices(int PracticeLevel, int DoctorId)
		{
			try
			{
				var practices = db.Practices.Where(x => x.PracticeLevel == PracticeLevel 
													   && x.DoctorId == DoctorId).ToList();
				return Request.CreateResponse(HttpStatusCode.OK, practices);

			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
		[HttpGet]
		public HttpResponseMessage GetMyCollection(string Type, int DoctorId)
		{
			try
			{
				var MyCollections = db.Collections.Where(x => x.CollectionType == Type && x.DoctorId == DoctorId).Select(x => new
				{
					x.CollectionText,
					x.CollectionId,
					x.CollectionImage,
					IsSelected = false,
					x.CollectionAudio,
					x.CollectionType
				}).ToList();
				return Request.CreateResponse(HttpStatusCode.OK, MyCollections);

			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
		[HttpGet]
		public HttpResponseMessage GetPracticeCollection(int PracticeId)
		{
			try
			{
				var CollectionIds = db.PracticeCollections.Where(x => x.PracticeId == PracticeId)
														  .Select(x => x.CollectionId).ToList();
				var MyCollections = db.Collections.Where(x => CollectionIds.Contains(x.CollectionId)).ToList();
				return Request.CreateResponse(HttpStatusCode.OK, MyCollections);

			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}

		[HttpPost]
		public HttpResponseMessage AddNewCollection()
		{
			try
			{
				Collection collection = new Collection();
				var httpRequest = HttpContext.Current.Request;
				var keys = httpRequest.Form;
				string path = HttpContext.Current.Server.MapPath("~/Images/");
				if (!Directory.Exists(path))
				{
					Directory.CreateDirectory(path);
				}
				if (httpRequest.Files.Count > 0)
				{
					var postedFile = httpRequest.Files[0];
					var namefile = Guid.NewGuid() + "_" + DateTime.Now.ToString("mmss") + Path.GetExtension(postedFile.FileName);
					var filePath = Path.Combine(HttpContext.Current.Server.MapPath("~/Images/"), namefile);
					collection.CollectionImage = "Images/" + namefile;
					postedFile.SaveAs(filePath);

					postedFile = httpRequest.Files[1];
					namefile = Guid.NewGuid() + "_" + DateTime.Now.ToString("mmss") + System.IO.Path.GetExtension(postedFile.FileName);
					filePath = Path.Combine(System.Web.HttpContext.Current.Server.MapPath("~/Images/"), namefile);
					collection.CollectionAudio = "Images/" + namefile;
					postedFile.SaveAs(filePath);

				}
				collection.CollectionText = keys["CollectionText"];
				collection.CollectionType = keys["CollectionType"];//word ,letter,sentence
				collection.CategoryId = int.Parse(keys["CategoryId"]);
				collection.DoctorId = int.Parse(keys["DoctorId"]);//Who is adding collection
				db.Collections.Add(collection);
				db.SaveChanges();
				return Request.CreateResponse(HttpStatusCode.OK, "Added");
			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
		[HttpPost]
		public HttpResponseMessage UpdateCollection()
		{
			try
			{

				Collection collection = new Collection();
				var httpRequest = HttpContext.Current.Request;
				var keys = httpRequest.Form;

				var collectionId = int.Parse(keys["CollectionId"]);
				collection = db.Collections.FirstOrDefault(c => c.CollectionId == collectionId);

				string path = HttpContext.Current.Server.MapPath("~/Images/");
				if (!Directory.Exists(path))
				{
					Directory.CreateDirectory(path);
				}
				if (httpRequest.Files["Image"] != null)
				{
					var postedFile = httpRequest.Files["Image"];
					var namefile = Guid.NewGuid() + "_" + Path.GetExtension(postedFile.FileName);
					var filePath = Path.Combine(HttpContext.Current.Server.MapPath("~/Images/"), namefile);
					postedFile.SaveAs(filePath);
					
					collection.CollectionImage = "Images/" + namefile;
					
				}
				if (httpRequest.Files["Audio"] != null)
				{

					var postedFile = httpRequest.Files["Audio"];
					var namefile = Guid.NewGuid() + "_" + System.IO.Path.GetExtension(postedFile.FileName);
					var filePath = Path.Combine(System.Web.HttpContext.Current.Server.MapPath("~/Images/"), namefile);
					postedFile.SaveAs(filePath);

					collection.CollectionAudio = "Images/" + namefile;
					

				}
				if (keys["CollectionText"] != null)
				{
					collection.CollectionText = keys["CollectionText"];
				}
				if (keys["CollectionType"] != null)
				{
					collection.CollectionType = keys["CollectionType"];
				}
				if (keys["DoctorId"] != null)
				{
					collection.DoctorId = int.Parse(keys["DoctorId"]);
				}
				collection.CategoryId = int.Parse(keys["CategoryId"]);
				db.Entry(collection).State = EntityState.Modified;	
				db.SaveChanges();
				return Request.CreateResponse(HttpStatusCode.OK, "Added");
			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
		[HttpPost]
		public HttpResponseMessage SetNewAppointment(Appointment app)
		{
			try
			{
				app.AppDate=app.AppDate.Value.AddDays(1);
				db.Appointments.Add(app);
				db.SaveChanges();
				return Request.CreateResponse(HttpStatusCode.OK, "Added");
			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
		[HttpGet]
		public HttpResponseMessage GetTodayPatientAppointments(int DoctorId)
		{
			try
			{
				var now = DateTime.Now;
				var appIds = db.AppoinmentPractices.Select(x => x.AppId).Distinct().ToList();

				var appointments = db.Appointments.Where(x => x.DoctorId == DoctorId 
				                                   && x.IsActive == false && x.IsComplete == false 
												   && !appIds.Contains(x.AppId)).ToList();

				var todayAppointments = appointments.Where(x => now.Date.Month==x.AppDate.Value.Month 
				                                          && now.Date.Year==x.AppDate.Value.Year 
														  && now.Date.Day==x.AppDate.Value.Day).ToList();

				var patientIds = todayAppointments.Select(x => x.PatientId).ToList();

				var patients = db.Users.Where(x => patientIds.Contains(x.UserId)).ToList();

				var list = todayAppointments.Join(patients, 
					app => app.PatientId, 
					pat => pat.UserId,
					(app, pat) =>
					new
					{
						app.AppId,
						app.LevelNo,
						pat.UserId,
						pat.UserName,
						pat.UserPhone,
						pat.UserGender
					}).ToList();
				return Request.CreateResponse(HttpStatusCode.OK, list);
			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
		[HttpPost]
		public HttpResponseMessage SetAppointmentPractices(AppointmentModel appointmentModel)
		{
			try
			{
				List<AppoinmentPractice> appoinmentPractices = new List<AppoinmentPractice>();
				var appointment = db.Appointments.FirstOrDefault(x => x.AppId == appointmentModel.AppId);

				appointment.IsActive = true;
				appointment.Remarks = appointmentModel.Remarks;
				db.Entry(appointment).State = EntityState.Modified;
				db.SaveChanges();
				
				var PracticeIds = appointmentModel.PracticeIds.Split(',').ToList();
				foreach (var item in PracticeIds)
				{
				var appPractice=new AppoinmentPractice
					{
						AppId = appointment.AppId,
						PracticeId = int.Parse(item),
						PaRemarks = ""
					};
					appoinmentPractices.Add(appPractice);
				}
				if (appoinmentPractices.Count > 0)
				{
					db.AppoinmentPractices.AddRange(appoinmentPractices);
					db.SaveChanges();

					var practiceCollections = db.PracticeCollections.Where(x => PracticeIds.Contains(x.PracticeId + ""));
					var practionCollectionData = db.Collections.Join(practiceCollections,
												pd => pd.CollectionId,
												pc => pc.CollectionId,
												(pd, pc) => new { pd.CollectionText, pd.CollectionImage, pd.CollectionAudio, pc.PracticeId }

												).ToList();
					foreach (var item in appoinmentPractices)
					{
						var appointmentPracticeCollection = practionCollectionData
							.Where(x => x.PracticeId == item.PracticeId)
							.Select(x => new PatientAnswer
							{
								AppPracticeId = item.AppPracticeId,
								CollectionAudio = x.CollectionAudio,
								CollectionImage = x.CollectionImage,
								CollectionText = x.CollectionText,
								IsAttempted = false,
								IsRight = false,
								PatientSelectedText = ""
							}).ToList();
						db.PatientAnswers.AddRange(appointmentPracticeCollection);
						db.SaveChanges();
					}
				}


				return Request.CreateResponse(HttpStatusCode.OK, "Added");
			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.ToString());
			}
		}
		[HttpGet]
		public HttpResponseMessage GetPatientAppointments(int PatientId)
		{
			try
			{
				var appIds = db.AppoinmentPractices.Select(app=>app.AppId).Distinct().ToList();

				var appointments = db.Appointments.Where(x => x.PatientId == PatientId 
				                                         && appIds.Contains(x.AppId)).ToList();
				return Request.CreateResponse(HttpStatusCode.OK, appointments);
			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
		[HttpGet]
		public HttpResponseMessage GetAppointmentPracticeCollection(int AppPracticeId)
		{
			try
			{
				var Collections = db.PatientAnswers.Where(x => x.AppPracticeId == AppPracticeId).ToList();
				return Request.CreateResponse(HttpStatusCode.OK, Collections);

			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
		[HttpGet]
		public HttpResponseMessage GetCollections()
		{
			try
			{
				return Request.CreateResponse(HttpStatusCode.OK, db.Collections.ToList());
			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
		[HttpGet]
		public HttpResponseMessage GetTrainingCollections(int PatientId)
		{
			try
			{
				var collections = GetCurrentCollections(PatientId);
				return Request.CreateResponse(HttpStatusCode.OK, collections);
			}
			catch (Exception ex)
			{
				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
		[HttpGet]
		public HttpResponseMessage GetTestCollections(int PatientId)
		{
			try
			{
				var testCollections = new List<TestModel>();
				var collections = GetCurrentCollections(PatientId);

				for (int i = 0; i < collections.Count; i++)
				{
					var testMcq = new TestModel
					{
						AnsId = collections[i].AnsId,
						IsAttempted = collections[i].IsAttempted,
						IsRight = collections[i].IsRight,
						CollectionAudio = collections[i].CollectionAudio,
						CollectionImage = collections[i].CollectionImage,
						CollectiontText = collections[i].CollectionText,
						PatientSelectedText = collections[i].PatientSelectedText
					};
					var CorrectOptionPostion = GetRandomPosition();
					var optionPositions = GetOtherThreeOptionsPositions(i, collections.Count);
					if (CorrectOptionPostion == "A")
					{
						testMcq.OptionA = collections[i].CollectionText;
						testMcq.OptionB = collections[optionPositions[0]].CollectionText;
						testMcq.OptionC = collections[optionPositions[1]].CollectionText;
						testMcq.OptionD = collections[optionPositions[2]].CollectionText;
					}
					else if (CorrectOptionPostion == "B")
					{
						testMcq.OptionB = collections[i].CollectionText;
						testMcq.OptionA = collections[optionPositions[0]].CollectionText;
						testMcq.OptionD = collections[optionPositions[1]].CollectionText;
						testMcq.OptionC = collections[optionPositions[2]].CollectionText;
					}
					else if (CorrectOptionPostion == "C")
					{
						testMcq.OptionC = collections[i].CollectionText;
						testMcq.OptionD = collections[optionPositions[0]].CollectionText;
						testMcq.OptionA = collections[optionPositions[1]].CollectionText;
						testMcq.OptionB = collections[optionPositions[2]].CollectionText;
					}
					else
					{
						testMcq.OptionD = collections[i].CollectionText;
						testMcq.OptionA = collections[optionPositions[0]].CollectionText;
						testMcq.OptionB = collections[optionPositions[1]].CollectionText;
						testMcq.OptionC = collections[optionPositions[2]].CollectionText;
					}

					testCollections.Add(testMcq);
				}

				return Request.CreateResponse(HttpStatusCode.OK, testCollections);
			}
			catch (Exception ex)
			{
				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}

		private List<int> GetOtherThreeOptionsPositions(int currentPosition, int range)
		{
			random = new Random();
			var positions = new List<int>();
			int count = 0;
			while (count < 3)
			{
				var number = random.Next(0, range);
				if (!positions.Contains(number) && number != currentPosition)
				{
					positions.Add(number);
					count++;
				}
			}
			return positions;
		}

		private string GetRandomPosition()
		{

			random = new Random();
			bool generateAnother = true;
			string position = "A";
			while (generateAnother)
			{
				var number = random.Next(0, 4);
				if (number != previousGeneratedPosition)
				{
					previousGeneratedPosition = number;
					generateAnother = false;
					if (number == 0)
					{
						position = "A";
					}
					else if (number == 1)
					{
						position = "B";
					}
					else if (number == 2)
					{
						position = "C";
					}
					else
					{
						position = "D";
					}
				}

			}
			return position;
		}

		public List<PatientAnswer> GetCurrentCollections(int PatientId)
		{
			var collections = new List<PatientAnswer>();
			var activeApp = db.Appointments.Where(x => x.PatientId == PatientId && x.IsActive == true
			                                        && x.IsComplete == false).OrderByDescending(x=>x.AppDate)
													.FirstOrDefault();
			if (activeApp != null)
			{
				var AppPracticeIds = db.AppoinmentPractices.Where(X => X.AppId == activeApp.AppId)
					                                       .Select(X => X.AppPracticeId).ToList();

				collections = db.PatientAnswers.Where(x => AppPracticeIds.Contains((int)x.AppPracticeId)).ToList();

			}
			return collections;
		}
		//SaveAppointmentPracticeCollectionAns
		[HttpGet]
		public HttpResponseMessage SaveAppointmentPracticeCollectionAns(int AnsId, bool IsRight, string PatientSelectedText)
		{
			try
			{
				var ans = db.PatientAnswers.FirstOrDefault(x => x.AnsId == AnsId);
				ans.IsAttempted = true;
				ans.IsRight = IsRight;
				ans.PatientSelectedText = PatientSelectedText;
				db.Entry(ans).State = EntityState.Modified;
				db.SaveChanges();

				//check if all Questions are solved
				/*var appId = db.AppoinmentPractices.Where(x => x.AppPracticeId == ans.AppPracticeId).Select(x => x.AppId).FirstOrDefault();
				var AppPracticeIds = db.AppoinmentPractices.Where(x => x.AppId == appId).Select(x => x.AppPracticeId).ToList();
				var IsAnyUnAttempted = db.PatientAnswers.Where(x => AppPracticeIds.Contains((int)x.AppPracticeId) && x.IsAttempted == false).Any();
				if (IsAnyUnAttempted == false)
				{
					var appointment = db.Appointments.FirstOrDefault(x => x.AppId == appId);
					appointment.IsActive = false;
					appointment.IsComplete = true;
					db.Entry(appointment).State = EntityState.Modified;
					db.SaveChanges();

				}*/
				return Request.CreateResponse(HttpStatusCode.OK, "Saved");
			}
			catch (Exception ex)
			{
				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}

		[HttpPost]
		public HttpResponseMessage SaveOneBlankTemplate(OneBlankTemplateModel oneBlankTemplate)
		{
			try
			{

				List<Collection> Collections = new List<Collection>();

				var CollectoinIds = oneBlankTemplate.CollectionIds.Split(',').ToList();
				var collections = db.Collections.Where(c => CollectoinIds.Contains(c.CollectionId + "")).ToList();
				foreach (var item in collections)
				{

					Collection collection = new Collection();
					collection.DoctorId = oneBlankTemplate.DoctorId;
					collection.CollectionType = "Sentence";
					collection.CollectionAudio = item.CollectionAudio;
					collection.CollectionImage = item.CollectionImage;
					collection.CollectionText = oneBlankTemplate.Sentence.Replace("_", item.CollectionText);
					Collections.Add(collection);
				}
				if (Collections.Count > 0)
				{
					db.Collections.AddRange(Collections);
					db.SaveChanges();
				}
				return Request.CreateResponse(HttpStatusCode.OK, "Added");
			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
		[HttpPost]
		public HttpResponseMessage SaveTwoBlankTemplate(TwoBlankTemplateModel twoBlankTemplate)
		{
			try
			{

				List<Collection> Collections = new List<Collection>();

				var CollectoinIds = twoBlankTemplate.FirstBlankCollectionIds.Split(',').ToList();
				var firstCollections = db.Collections.AsNoTracking().Where(c => CollectoinIds.Contains(c.CollectionId + "")).ToList();
				CollectoinIds = twoBlankTemplate.SecondBlankCollectionIds.Split(',').ToList();
				var secondCollections = db.Collections.AsNoTracking().Where(c => CollectoinIds.Contains(c.CollectionId + "")).ToList();
				foreach (var item in firstCollections)
				{
					int Place = twoBlankTemplate.Sentence.IndexOf("_");
					item.CollectionText = twoBlankTemplate.Sentence.Remove(Place, 1).Insert(Place, item.CollectionText);

				}
				foreach (var item in secondCollections)
				{
					foreach (var collection in firstCollections)
					{
						Collection newCollection = new Collection();
						newCollection.DoctorId = twoBlankTemplate.DoctorId;
						newCollection.CollectionType = "Sentence";
						newCollection.CollectionAudio = collection.CollectionAudio;
						newCollection.CollectionImage = collection.CollectionImage;
						newCollection.CollectionText = collection.CollectionText.Replace("_", item.CollectionText);
						Collections.Add(newCollection);
					}
				}
				if (Collections.Count > 0)
				{
					db.Collections.AddRange(Collections);
					db.SaveChanges();
				}
				return Request.CreateResponse(HttpStatusCode.OK, "Added");
			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}

		[HttpPost]
		public HttpResponseMessage AddNewTemplate(UserTemplate userTemplate)
		{
			try
			{
				db.UserTemplates.Add(userTemplate);
				db.SaveChanges();
				return Request.CreateResponse(HttpStatusCode.OK, "Success");
			}
			catch (Exception ex)
			{
				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}

		[HttpGet]
		public HttpResponseMessage GetDoctorTemplates(int DoctorId)
		{
			try
			{
				var doctorTemplates = db.UserTemplates.Where(t => t.DoctorId == DoctorId).ToList();
				return Request.CreateResponse(HttpStatusCode.OK, doctorTemplates);
			}
			catch (Exception ex)
			{
				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}

		[HttpGet]
		public HttpResponseMessage DeleteTemplate(int Id)
		{
			try
			{
				var template = db.UserTemplates.FirstOrDefault(t=>t.TemplateId == Id);
				if(template != null)
				{
					db.Entry(template).State = EntityState.Deleted;
					db.SaveChanges();
				}
				return Request.CreateResponse(HttpStatusCode.OK, "your Data here");
			}
			catch (Exception ex)
			{
				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
		[HttpGet]
		public HttpResponseMessage DeleteCollection(int Id)
		{
			try
			{
				var collection = db.Collections.Where(t => t.CollectionId == Id).FirstOrDefault();
				if (collection != null)
				{
					db.Entry(collection).State = EntityState.Deleted;
					db.SaveChanges();
				}
				return Request.CreateResponse(HttpStatusCode.OK, "your Data here");
			}
			catch (Exception ex)
			{
				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
		[HttpGet]
		public HttpResponseMessage DeletePractice(int Id)
		{
			try
			{
				var practice = db.Practices.Where(t => t.PracticeId == Id).FirstOrDefault();
				if (practice != null)
				{
					db.Entry(practice).State = EntityState.Deleted;
					db.SaveChanges();
				}
				return Request.CreateResponse(HttpStatusCode.OK, "your Data here");
			}
			catch (Exception ex)
			{
				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
		[HttpGet]
		public HttpResponseMessage DeleteUser(int Id)
		{
			try
			{
				var user = db.Users.FirstOrDefault(t => t.UserId == Id);
				if (user != null)
				{
					db.Entry(user).State = EntityState.Deleted;
					db.SaveChanges();
				}
				return Request.CreateResponse(HttpStatusCode.OK, "your Data here");
			}
			catch (Exception ex)
			{
				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
		[HttpGet]
		public HttpResponseMessage DeleteAppointment(int Id)
		{
			try
			{
				var appoinment = db.Appointments.FirstOrDefault(t => t.AppId == Id);
				if (appoinment != null)
				{
					db.Entry(appoinment).State = EntityState.Deleted;
					db.SaveChanges();
				}
				return Request.CreateResponse(HttpStatusCode.OK, "your Data here");
			}
			catch (Exception ex)
			{
				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
		[HttpGet]
		public HttpResponseMessage DeletePracticeCollection(int PracticeId,int CollectionId)
		{
			try
			{
				var practiceCollection = db.PracticeCollections.FirstOrDefault(t => t.PracticeId == PracticeId 
																	 && t.CollectionId==CollectionId);
				if (practiceCollection != null)
				{
					db.Entry(practiceCollection).State = EntityState.Deleted;
					db.SaveChanges();
				}
				return Request.CreateResponse(HttpStatusCode.OK, "your Data here");
			}
			catch (Exception ex)
			{
				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}


		[HttpPost]
		public HttpResponseMessage SaveWordsTemplate(WordsTemplate wordTemplate)
		{
			try
			{
				db.WordsTemplates.Add(wordTemplate);
				db.SaveChanges();
				
				return Request.CreateResponse(HttpStatusCode.OK, wordTemplate);
			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
		[HttpPost]
		public HttpResponseMessage SaveCategory(Category category)
		{
			try
			{
				db.Categories.Add(category);
				db.SaveChanges();

				return Request.CreateResponse(HttpStatusCode.OK, category);
			}
			catch (Exception ex)
			{

				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}

		[HttpGet]
		public HttpResponseMessage GetMyCategory(int DoctorId)
		{
			try
			{
				var categories = db.Categories.Where(c => c.DoctorId == DoctorId || c.DoctorId == 0).ToList();
				return Request.CreateResponse(HttpStatusCode.OK, categories);
			}
			catch (Exception ex)
			{
				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
		[HttpGet]
		public HttpResponseMessage GetWordsCategory(int DoctorId)
		{
			try
			{
				var categories=db.WordsCategories.Where(c=>c.DoctorId==DoctorId || c.DoctorId==0).ToList();
				return Request.CreateResponse(HttpStatusCode.OK, categories);
			}
			catch (Exception ex)
			{
				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
		[HttpGet]
		public HttpResponseMessage GetDoctorWordsTemplates(int DoctorId)
		{
			try
			{
				var wordsTemplates = db.WordsTemplates.Where(c => c.DoctorId == DoctorId).ToList();
				return Request.CreateResponse(HttpStatusCode.OK, wordsTemplates);
			}
			catch (Exception ex)
			{
				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}

		[HttpGet]
		public HttpResponseMessage DeleteWordTemplate(int Id)
		{
			try
			{
				var template = db.WordsTemplates.FirstOrDefault(t => t.WordTemplateId == Id);
				if (template != null)
				{
					db.Entry(template).State = EntityState.Deleted;
					db.SaveChanges();
				}
				return Request.CreateResponse(HttpStatusCode.OK, "your Data here");
			}
			catch (Exception ex)
			{
				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}

		[HttpGet]
		public HttpResponseMessage GenerateSentences(int TemplateId,int DoctorId)
		{
			try
			{
				var generatedSentences = new List<Collection>();
				var template = db.WordsTemplates.FirstOrDefault(t => t.WordTemplateId == TemplateId);
				if(template != null)
				{
					if (template.TemplateType=="1")
					{
						generatedSentences = GetSingleBlankSentences(template, DoctorId);
					}
					else
					{
						generatedSentences = GetDoubleBlankSentences(template, DoctorId);
					}

				}
				/*if (generatedSentences.Count > 0)
				{
					db.Collections.AddRange(generatedSentences);
					db.SaveChanges();
				}*/
				return Request.CreateResponse(HttpStatusCode.OK, generatedSentences);
			}
			catch (Exception ex)
			{
				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}

		private List<Collection> GetDoubleBlankSentences(WordsTemplate template,int DoctorId)
		{
			var generatedSentences = new List<Collection>();
			var getfirstCollectionOfTemplateCategories = db.Collections.AsNoTracking()
				                                    .Where(c=>c.CategoryId==template.FirstBlankCategoryId && 
													       c.DoctorId==DoctorId && c.CollectionType=="Word").ToList();

			var getsecondCollectionOfTemplateCategories = db.Collections.AsNoTracking()
													.Where(c => c.CategoryId == template.SecondBlankCategoryId &&
														   c.DoctorId == DoctorId && c.CollectionType == "Word").ToList();

			foreach (var item in getfirstCollectionOfTemplateCategories)
			{
				foreach (var second in getsecondCollectionOfTemplateCategories.Where(c=>c.CollectionId!=item.CollectionId))
				{
					var collection = new Collection();
					collection.CategoryId = 0;
					collection.CollectionText = item.CollectionText + " " + template.WordTemplateText+"  "+second.CollectionText;
					collection.CollectionType = "Sentence";
					collection.DoctorId = DoctorId;
					collection.CollectionImage = item.CollectionImage;
					collection.CollectionAudio = item.CollectionAudio;
					generatedSentences.Add(collection);
				}
			}
			
			return generatedSentences;
		}

		private List<Collection> GetSingleBlankSentences(WordsTemplate template,int DoctorId)
		{
			var generatedSentences = new List<Collection>();
			var getfirstCollectionOfTemplateCategories = db.Collections.AsNoTracking()
													.Where(c => c.CategoryId == template.FirstBlankCategoryId &&
														   c.DoctorId == DoctorId && c.CollectionType == "Word").ToList();
			foreach (var item in getfirstCollectionOfTemplateCategories)
			{
				var collection = new Collection();
				collection.CategoryId = 0;
				collection.CollectionText =template.WordTemplateText+" "+item.CollectionText;
				collection.CollectionType = "Sentence";
				collection.DoctorId = DoctorId;
				collection.CollectionImage = item.CollectionImage;
				collection.CollectionAudio= item.CollectionAudio;
				generatedSentences.Add(collection);
			}
			return generatedSentences;
		}

		[HttpGet]
		public HttpResponseMessage GetMySentences(int CategoryId, int DoctorId)
		{
			try
			{
				var generatedSentences = new List<Collection>();
				var collections = db.Collections.AsNoTracking().Where(t => t.CategoryId == CategoryId).ToList();
                foreach (var item in collections)
                {
					var collection = new Collection();
					collection.CategoryId = 0;
					collection.CategoryType = 0;
					collection.CollectionText ="This is " + item.CollectionText;
					collection.CollectionType = "Sentence";
					collection.DoctorId = DoctorId;
					collection.CollectionImage = item.CollectionImage;
					collection.CollectionAudio = item.CollectionAudio;
					generatedSentences.Add(collection);
				}
                if (generatedSentences.Count > 0)
                {
                    db.Collections.AddRange(generatedSentences);
                    db.SaveChanges();
                }
                return Request.CreateResponse(HttpStatusCode.OK, generatedSentences);
			}
			catch (Exception ex)
			{
				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
			}
		}
	}
}
